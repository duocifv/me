#include <Arduino.h>
#include <TaskScheduler.h>

#include "config.h"
#include "wifi_module.h"
#include "http_sensors_module.h"
#include "dht_module.h"
#include "ds18b20_module.h"
#include "json_builder.h"
#include "relay_module.h"
#include "camera_module.h"
#include "http_camera_module.h"
#include "led_indicator.h"

// ----- C√°c m√¥-ƒëun -----
WifiModule     wifi(ssid, password);
DHTModule      dht;
DS18B20Module  ds18b20;
RelayModule    pumpRelay(12, false);   // activeLow=false (board relay COM‚ÄìNO c·∫ßn HIGH ƒë·ªÉ ON)
LedIndicator   errorLed(4);
CameraModule   cameraModule;
HttpSensorModule httpSensor(host, port, sensorPath, deviceToken, deviceId);
HttpCameraModule httpCamera(host, port, imgPath, deviceToken, deviceId);

char jsonBuffer[512];

// ----- TaskScheduler -----
Scheduler ts;

// ----- Tr·∫°ng th√°i chung -----
bool pumpIsOn    = false;
float waterTemp  = NAN, ambientTemp = NAN, humidity = NAN;
bool ds18b20Err  = false, dhtErr     = false;
bool wifiErr     = false;

// ----- Khai b√°o callback cho TaskScheduler -----
void readSensorsCallback();
void uploadDataCallback();
void uploadImageCallback();
void managePumpCallback();
void indicateError(bool wifiErr, bool dsErr, bool dhtErr);

// T·∫°o c√°c Task, ch·ªâ ƒë·ªãnh kho·∫£ng interval
Task tReadSensors(  SENSOR_INTERVAL, TASK_FOREVER, &readSensorsCallback, &ts);
Task tUploadData(   DATA_INTERVAL,   TASK_FOREVER, &uploadDataCallback, &ts);
Task tUploadImage(  IMAGE_INTERVAL,  TASK_FOREVER, &uploadImageCallback, &ts);
Task tManagePump(   PUMP_CYCLE_MS,   TASK_FOREVER, &managePumpCallback, &ts);

void setup() {
  Serial.begin(115200);
  delay(500);

  Serial.println("\n===== B·∫Øt ƒë·∫ßu setup() =====");

  // 1) K·∫øt n·ªëi WiFi l·∫ßn ƒë·∫ßu
  wifi.connect();
  Serial.println("[Setup] ƒê√£ g·ªçi wifi.connect()");

  // 2) Kh·ªüi ƒë·ªông c·∫£m bi·∫øn
  dht.begin();
  ds18b20.begin();
  Serial.println("[Setup] DHT & DS18B20 ƒë√£ begin()");

  // 3) Kh·ªüi ƒë·ªông HTTP modules
  httpSensor.begin();
  cameraModule.init();
  httpCamera.setTimeout(20000);
  Serial.println("[Setup] HTTP modules ƒë√£ begin()");

  // 4) Th√™m Task v√†o Scheduler
  ts.addTask(tReadSensors);
  ts.addTask(tUploadData);
  ts.addTask(tUploadImage);
  ts.addTask(tManagePump);

  // 5) K√≠ch ho·∫°t c√°c Task
  tReadSensors.enable();
  tUploadData.enable();
  tUploadImage.enable();
  tManagePump.enable();
  Serial.println("[Setup] C√°c Task ƒë√£ enable()");

  Serial.println("===== Setup() ho√†n t·∫•t =====\n");
}

void loop() {
  // C·∫≠p nh·∫≠t LED n·∫øu ƒëang trong ch·∫ø ƒë·ªô blink non‚Äêblocking
  errorLed.update();

  // Th·ª±c thi TaskScheduler (ki·ªÉm tra v√† g·ªçi callback khi ƒë·∫øn th·ªùi ƒëi·ªÉm)
  ts.execute();
}

// ---------- TASK FUNCTIONS ----------

void readSensorsCallback() {
  Serial.println("[DEBUG] => readSensorsCallback()");

  // ƒê·ªçc DHT (c·∫≠p nh·∫≠t √≠t nh·∫•t 2s/l·∫ßn)
  dht.update();
  ambientTemp = dht.getTemperature();
  humidity    = dht.getHumidity();

  // ƒê·ªçc DS18B20
  waterTemp = ds18b20.getTemperature();

  // X√°c ƒë·ªãnh l·ªói
  ds18b20Err = isnan(waterTemp);
  dhtErr     = (!dht.hasData()) || isnan(ambientTemp) || isnan(humidity);
  wifiErr    = !wifi.isConnected();

  // N·∫øu WiFi ch∆∞a k·∫øt n·ªëi, th·ª≠ connect l·∫°i
  if (wifiErr) {
    Serial.println("‚ö†Ô∏è [readSensors] WiFi ch∆∞a k·∫øt n·ªëi, g·ªçi wifi.connect() l·∫°i...");
    wifi.connect();
  }

  // Nh√°y LED b√°o l·ªói (n·∫øu c√≥)
  indicateError(wifiErr, ds18b20Err, dhtErr);

  // In log k·∫øt qu·∫£
  if (ds18b20Err) {
    Serial.println("[DEBUG] DS18B20 L·ªñI ‚Äì tr·∫£ NAN");
  } else {
    Serial.printf("[DEBUG] DS18B20 nhi·ªát ƒë·ªô = %.1f¬∞C\n", waterTemp);
  }

  if (dhtErr) {
    Serial.println("[DEBUG] DHT22 L·ªñI ho·∫∑c ch∆∞a c√≥ data");
  } else {
    Serial.printf("[DEBUG] DHT22 Temp = %.1f¬∞C, Hum = %.1f%%\n", ambientTemp, humidity);
  }

  Serial.println("---");
}

void uploadDataCallback() {
  Serial.println("[DEBUG] => uploadDataCallback()");

  // Gi·∫£ l·∫≠p pH, EC, ORP
  float ph  = 7.0;
  float ec  = 1.5;
  int   orp = 400;

  size_t jsonLen = buildJsonSnapshots(
    jsonBuffer, sizeof(jsonBuffer),
    waterTemp, ambientTemp, humidity,
    ph, ec, orp
  );
  Serial.printf("[DEBUG] buildJsonSnapshots() tr·∫£ v·ªÅ length = %u\n", (unsigned)jsonLen);

  if (jsonLen > 0) {
    bool ok = httpSensor.sendData(jsonBuffer, jsonLen);
    Serial.printf("[DEBUG] httpSensor.sendData() tr·∫£ v·ªÅ %s\n", ok ? "true" : "false");
    if (ok) {
      Serial.println("‚úÖ [uploadData] G·ª≠i d·ªØ li·ªáu API th√†nh c√¥ng");
    } else {
      Serial.println("‚ùå [uploadData] G·ª≠i d·ªØ li·ªáu API th·∫•t b·∫°i");
    }
  } else {
    Serial.println("‚ùå [uploadData] T·∫°o JSON payload th·∫•t b·∫°i");
  }
}

void uploadImageCallback() {
  Serial.println("[DEBUG] => uploadImageCallback()");

  if (!wifi.isConnected()) {
    Serial.println("‚ö†Ô∏è [uploadImage] B·ªè qua g·ª≠i ·∫£nh v√¨ WiFi m·∫•t k·∫øt n·ªëi");
    return;
  }

  camera_fb_t* fb = cameraModule.capture();
  if (fb) {
    unsigned long duration;
    bool ok = httpCamera.send(fb, duration);
    Serial.printf("[DEBUG] httpCamera.send() tr·∫£ v·ªÅ %s, th·ªùi gian = %lums\n", ok ? "true" : "false", duration);
    if (ok) {
      Serial.printf("‚úÖ [uploadImage] G·ª≠i ·∫£nh OK, m·∫•t %lums\n", duration);
    } else {
      Serial.println("‚ùå [uploadImage] G·ª≠i ·∫£nh th·∫•t b·∫°i");
    }
    cameraModule.release(fb);
  } else {
    Serial.println("‚ùå [uploadImage] Kh√¥ng ch·ª•p ƒë∆∞·ª£c frame");
  }
}

void managePumpCallback() {
  Serial.println("[DEBUG] => managePumpCallback()");
  if (!pumpIsOn) {
    // B·∫≠t b∆°m (relay active‚ÄêHIGH)
    pumpRelay.turnOn();
    pumpIsOn = true;
    Serial.println("üíß [Pump] B·∫¨T");

    // Sau PUMP_ON_MS s·∫Ω t·∫Øt
    tManagePump.setInterval(PUMP_ON_MS);
    tManagePump.restart();
  } else {
    // T·∫Øt b∆°m
    pumpRelay.turnOff();
    pumpIsOn = false;
    Serial.println("üíß [Pump] T·∫ÆT");

    // Sau PUMP_CYCLE_MS s·∫Ω b·∫≠t l·∫°i
    tManagePump.setInterval(PUMP_CYCLE_MS);
    tManagePump.restart();
  }
}

void indicateError(bool wifiErr, bool dsErr, bool dhtErr) {
  if (wifiErr) {
    Serial.println("[LED] Nh√°y b√°o l·ªói WiFi (4 l·∫ßn)");
    errorLed.blink(4, 200);
  } else if (dsErr) {
    Serial.println("[LED] Nh√°y b√°o l·ªói DS18B20 (3 l·∫ßn)");
    errorLed.blink(3, 200);
  } else if (dhtErr) {
    Serial.println("[LED] Nh√°y b√°o l·ªói DHT22 (2 l·∫ßn)");
    errorLed.blink(2, 200);
  } else {
    errorLed.off();
  }
}
