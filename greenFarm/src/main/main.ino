#include <Arduino.h>
#include "driver/rtc_io.h"
#include "esp_sleep.h"      // c·∫ßn include ƒë·ªÉ g·ªçi esp_sleep_enable_timer_wakeup()
    
#include "config.h"
#include "wifi_module.h"
#include "http_sensors_module.h"
#include "dht_module.h"
#include "ds18b20_module.h"
#include "json_builder.h"
#include "relay_module.h"
#include "camera_module.h"
#include "http_camera_module.h"
#include "led_indicator.h"

// ----- C√°c h·∫±ng s·ªë Deep Sleep -----
// V√≠ d·ª•: ng·ªß 5 ph√∫t = 5*60 gi√¢y = 300 gi√¢y = 300e6 microseconds
#define DEEP_SLEEP_INTERVAL_US  (5ULL * 60ULL * 1000000ULL)

// Th·ªùi gian ch·∫°y b∆°m m·ªói l·∫ßn wake (5 gi√¢y)
#define PUMP_ON_TIME_MS         5000

// ----- C√°c m√¥-ƒëun (gi·ªØ nguy√™n) -----
WifiModule      wifi(ssid, password);
DHTModule       dht;
DS18B20Module   ds18b20;
RelayModule     pumpRelay(12, false);   // activeLow = false ‚Üí HIGH b·∫≠t b∆°m
LedIndicator    errorLed(4);
CameraModule    cameraModule;
HttpSensorModule httpSensor(host, port, sensorPath, deviceToken, deviceId);
HttpCameraModule httpCamera(host, port, imgPath, deviceToken, deviceId);

// Buffer ƒë·ªÉ ch·ª©a JSON
char jsonBuffer[512];

// ----- Bi·∫øn tr·∫°ng th√°i (l∆∞u qua RTC memory n·∫øu c·∫ßn) -----
RTC_DATA_ATTR bool pumpHasRun = false;  
// N·∫øu b·∫°n mu·ªën m·ªói l·∫ßn wake ch·ªâ ch·∫°y b∆°m 1 l·∫ßn, d√πng bi·∫øn n√†y ƒë·ªÉ kh√¥ng ch·∫°y l·∫°i nhi·ªÅu l·∫ßn.

// Tr·∫°ng th√°i l·ªói
bool wifiErr     = false;
bool ds18b20Err  = false, dhtErr = false;

// Gi√° tr·ªã sensor ƒë·ªÉ log
float waterTemp = NAN, ambientTemp = NAN, humidity = NAN;

// ----- Prototype h√†m ph·ª• -----
void indicateError(bool wifiErr, bool dsErr, bool dhtErr);

void setup() {
  Serial.begin(115200);
  delay(500);
  Serial.println("\n===== Wake from Deep Sleep (setup) =====");

  // 1) K·∫øt n·ªëi WiFi
  wifi.connect();
  if (!wifi.isConnected()) {
    Serial.println("‚ö†Ô∏è [Setup] WiFi kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c");
    wifiErr = true;
  } else {
    wifiErr = false;
    Serial.println("[Setup] WiFi ƒë√£ k·∫øt n·ªëi");
  }

  // 2) Kh·ªüi ƒë·ªông c·∫£m bi·∫øn
  dht.begin();
  ds18b20.begin();
  delay(200); // cho c·∫£m bi·∫øn ·ªïn ƒë·ªãnh
  Serial.println("[Setup] C·∫£m bi·∫øn DHT & DS18B20 ƒë√£ begin()");

  // 3) ƒê·ªçc sensor ngay
  // --- ƒê·ªçc DHT22 ---
  dht.update();
  if (!dht.hasData()) {
    dhtErr = true;
    Serial.println("‚ö†Ô∏è [readSensors] L·ªói ƒë·ªçc DHT22");
  } else {
    dhtErr      = false;
    ambientTemp = dht.getTemperature();
    humidity    = dht.getHumidity();
  }

  // --- ƒê·ªçc DS18B20 ---
  float tempDS = ds18b20.getTemperature();
  if (isnan(tempDS)) {
    ds18b20Err = true;
    Serial.println("‚ö†Ô∏è [readSensors] L·ªói ƒë·ªçc DS18B20");
  } else {
    ds18b20Err = false;
    waterTemp  = tempDS;
  }

  // 4) Nh√°y LED b√°o l·ªói (n·∫øu c√≥)
  indicateError(wifiErr, ds18b20Err, dhtErr);

  // 5) N·∫øu WiFi ok v√† sensor ok, g·ª≠i d·ªØ li·ªáu l√™n server
  if (!wifiErr && !dhtErr && !ds18b20Err) {
    // Gi·∫£ l·∫≠p pH, EC, ORP
    float ph  = 7.0;
    float ec  = 1.5;
    int   orp = 400;

    size_t jsonLen = buildJsonSnapshots(
      jsonBuffer, sizeof(jsonBuffer),
      waterTemp, ambientTemp, humidity,
      ph, ec, orp
    );
    Serial.printf("[Setup] buildJsonSnapshots() length = %u\n", (unsigned)jsonLen);

    if (jsonLen > 0) {
      bool ok = httpSensor.sendData(jsonBuffer, jsonLen);
      Serial.printf("[Setup] httpSensor.sendData() ‚Üí %s\n", ok ? "true" : "false");
      if (ok) {
        Serial.println("‚úÖ [uploadData] G·ª≠i d·ªØ li·ªáu API th√†nh c√¥ng");
      } else {
        Serial.println("‚ùå [uploadData] G·ª≠i d·ªØ li·ªáu API th·∫•t b·∫°i");
      }
    } else {
      Serial.println("‚ùå [uploadData] T·∫°o JSON payload th·∫•t b·∫°i");
    }
  } else {
    Serial.println("‚ö†Ô∏è [uploadData] B·ªè qua g·ª≠i d·ªØ li·ªáu do c√≥ l·ªói WiFi ho·∫∑c sensor");
  }

  // 6) Ch·ª•p ·∫£nh v√† g·ª≠i (n·∫øu WiFi v·∫´n c√≤n)
  if (!wifiErr) {
    cameraModule.init(); // Kh·ªüi ƒë·ªông module camera (ESP32-CAM c·∫ßn init m·ªói l·∫ßn wake)
    httpCamera.setTimeout(20000);

    camera_fb_t* fb = cameraModule.capture();
    if (fb) {
      unsigned long duration;
      bool ok = httpCamera.send(fb, duration);
      Serial.printf("[Setup] httpCamera.send() ‚Üí %s, time = %lums\n", ok ? "true" : "false", duration);
      if (ok) {
        Serial.printf("‚úÖ [uploadImage] G·ª≠i ·∫£nh OK, m·∫•t %lums\n", duration);
      } else {
        Serial.println("‚ùå [uploadImage] G·ª≠i ·∫£nh th·∫•t b·∫°i");
      }
      cameraModule.release(fb);
    } else {
      Serial.println("‚ùå [uploadImage] Kh√¥ng ch·ª•p ƒë∆∞·ª£c frame");
    }
  } else {
    Serial.println("‚ö†Ô∏è [uploadImage] B·ªè qua g·ª≠i ·∫£nh v√¨ WiFi m·∫•t k·∫øt n·ªëi");
  }

  // 7) Qu·∫£n l√Ω b∆°m: n·∫øu ch∆∞a ch·∫°y l·∫ßn n√†o (pumpHasRun = false), b·∫≠t b∆°m 5s r·ªìi t·∫Øt
  if (!pumpHasRun) {
    Serial.println("üíß [Pump] L·∫ßn wake ƒë·∫ßu ti√™n: B·∫¨T b∆°m 5 gi√¢y");
    pumpRelay.turnOn();
    delay(PUMP_ON_TIME_MS);
    pumpRelay.turnOff();
    Serial.println("üíß [Pump] ƒê√£ T·∫ÆT b∆°m sau 5 gi√¢y");
    pumpHasRun = true;
  } else {
    Serial.println("üíß [Pump] ƒê√£ ch·∫°y b∆°m r·ªìi, l·∫ßn n√†y b·ªè qua");
  }

  // 8) Chu·∫©n b·ªã ƒëi v√†o Deep Sleep
  Serial.println("===== T·∫•t c·∫£ c√°c c√¥ng vi·ªác ƒë√£ xong, ESP s·∫Ω v√†o Deep Sleep =====");
  delay(500); // cho Serial k·ªãp g·ª≠i h·∫øt d·ªØ li·ªáu

  // **Ch√∫ √Ω**: ƒë·ªïi t√™n h√†m g·ªçi wake‚Äêup t·ª´ timer
  esp_sleep_enable_timer_wakeup(DEEP_SLEEP_INTERVAL_US);
  esp_deep_sleep_start();

  // Sau khi g·ªçi esp_deep_sleep_start(), ESP l·∫≠p t·ª©c reset v√† ch·∫°y l·∫°i t·ª´ setup()
}

void loop() {
  // Kh√¥ng bao gi·ªù ch·∫°y, v√¨ to√†n b·ªô logic n·∫±m trong setup()
}

// --------- H√†m ph·ª•: LED b√°o l·ªói (kh√¥ng blocking) ----------
void indicateError(bool wifiErr, bool dsErr, bool dhtErr) {
  if (wifiErr) {
    Serial.println("[LED] Nh√°y b√°o l·ªói WiFi (4 l·∫ßn)");
    errorLed.blink(4, 200);
  } else if (dsErr) {
    Serial.println("[LED] Nh√°y b√°o l·ªói DS18B20 (3 l·∫ßn)");
    errorLed.blink(3, 200);
  } else if (dhtErr) {
    Serial.println("[LED] Nh√°y b√°o l·ªói DHT22 (2 l·∫ßn)");
    errorLed.blink(2, 200);
  } else {
    errorLed.off();
  }
}
