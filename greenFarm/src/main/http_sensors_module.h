#ifndef HTTP_ERROR_MODULE_H
#define HTTP_ERROR_MODULE_H

#include <WiFi.h>
#include <WiFiClientSecure.h>

class HttpErrorModule {
private:
  const char* host;
  const int   port;
  const char* path;         // V√≠ d·ª• "/device-error"
  const char* deviceToken;  // G·ª≠i header x-device-token
  const char* deviceId;     // G·ª≠i header x-device-id
  WiFiClientSecure client;

public:
  HttpErrorModule(const char* h, int p, const char* pa, const char* token, const char* id)
    : host(h), port(p), path(pa), deviceToken(token), deviceId(id)
  {
    client.setInsecure();  // ‚ö† Kh√¥ng ki·ªÉm tra SSL cert (ƒë∆°n gi·∫£n ho√°)
  }

  bool begin() {
    // N·∫øu c·∫ßn kh·ªüi t·∫°o g√¨ th√™m, ƒë∆∞a v√†o ƒë√¢y
    return true;
  }

  /**
   * G·ª≠i b√°o l·ªói l√™n server qua POST JSON.
   * Tr·∫£ v·ªÅ true n·∫øu server tr·∫£ HTTP/1.1 200‚Ä¶, false n·∫øu c√≥ l·ªói.
   *
   * errorType: chu·ªói ƒë·ªãnh danh lo·∫°i l·ªói (v√≠ d·ª• "WiFi", "Sensor", "Pump", ‚Ä¶)
   * errorMessage: m√¥ t·∫£ chi ti·∫øt l·ªói
   */
  bool sendError(const char* errorType, const char* errorMessage) {
    if (WiFi.status() != WL_CONNECTED) {
      Serial.println("üö´ [Error] WiFi ch∆∞a k·∫øt n·ªëi, kh√¥ng th·ªÉ g·ª≠i l·ªói");
      return false;
    }

    Serial.printf("üõ† [Error] K·∫øt n·ªëi t·ªõi %s:%d\n", host, port);
    if (!client.connect(host, port)) {
      Serial.println("‚ùå [Error] K·∫øt n·ªëi SSL th·∫•t b·∫°i");
      return false;
    }

    // T·∫°o JSON nh·ªè g·ªçn
    String body = String("{") +
                  "\"deviceId\":\"" + deviceId + "\"," +
                  "\"error_type\":\"" + errorType + "\"," +
                  "\"error_message\":\"" + errorMessage + "\"" +
                  "}";

    size_t bodyLen = body.length();

    // T·∫°o HTTP POST request
    String request = String("POST ") + path + " HTTP/1.1\r\n" +
                     "Host: " + host + "\r\n" +
                     "Content-Type: application/json\r\n" +
                     "x-device-token: " + deviceToken + "\r\n" +
                     "x-device-id: " + deviceId + "\r\n" +
                     "Content-Length: " + String(bodyLen) + "\r\n" +
                     "Connection: close\r\n\r\n" +
                     body;

    client.print(request);
    Serial.println("‚úÖ [Error] Request ƒë√£ g·ª≠i:");
    Serial.println(request);

    // ƒê·ªçc d√≤ng status line
    String statusLine = client.readStringUntil('\n');
    if (statusLine.length() == 0) {
      Serial.println("‚ö†Ô∏è [Error] Kh√¥ng nh·∫≠n ƒë∆∞·ª£c response");
      client.stop();
      return false;
    }
    statusLine.trim();  // x√≥a \r v√† \n

    if (!statusLine.startsWith("HTTP/1.1 200")) {
      Serial.print("‚ùå [Error] Server tr·∫£ v·ªÅ: ");
      Serial.println(statusLine);
      client.stop();
      return false;
    }

    // B·ªè qua ph·∫ßn header c√≤n l·∫°i
    while (client.connected()) {
      String line = client.readStringUntil('\n');
      if (line == "\r" || line == "\n" || line.length() == 0) {
        break;
      }
    }

    client.stop();
    Serial.println("‚úÖ [Error] ƒê√£ g·ª≠i l·ªói th√†nh c√¥ng");
    return true;
  }

  /**
   * N·∫øu mu·ªën debug, c√≥ th·ªÉ l·∫•y raw response (header + body)
   */
  // const String& getRawResponse() const {
  //   return rawResponse;
  // }
};

#endif // HTTP_ERROR_MODULE_H
