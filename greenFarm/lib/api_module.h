#ifndef API_MODULE_H
#define API_MODULE_H

#include <WiFi.h>
#include <HTTPClient.h>

class ApiModule
{
private:
    const char *apiUrl;
    const char *deviceToken;
    const char *deviceId;
    HTTPClient http;

public:
    ApiModule(const char *url, const char *token, const char *id)
        : apiUrl(url), deviceToken(token), deviceId(id) {}

    bool begin()
    {
        // Kh√¥ng n√™n g·ªçi setReuse(true) n·∫øu kh√¥ng ki·ªÉm so√°t t·ªët k·∫øt n·ªëi
        // N·∫øu b·∫°n mu·ªën th·ª≠ c√≥ th·ªÉ b·∫≠t l·∫°i, nh∆∞ng t·ªët nh·∫•t ƒë·ªÉ false m·∫∑c ƒë·ªãnh
        // http.setReuse(true);
        return true;
    }

    bool sendData(const char *payload, size_t length)
    {
        if (WiFi.status() != WL_CONNECTED)
        {
            Serial.println("üö´ WiFi ch∆∞a k·∫øt n·ªëi");
            return false;
        }

        http.begin(apiUrl);
        http.addHeader("Content-Type", "application/json");
        http.addHeader("x-device-token", deviceToken);
        http.addHeader("x-device-id", deviceId);

        int code = http.POST((uint8_t *)payload, length);

        if (code > 0)
        {
            Serial.printf("‚úÖ Response: %d\n", code);
            http.end(); // ƒê√≥ng k·∫øt n·ªëi sau m·ªói request th√†nh c√¥ng
            return true;
        }

        Serial.printf("‚ùå POST l·ªói: %s\n", http.errorToString(code).c_str());
        http.end(); // ƒê√≥ng k·∫øt n·ªëi ngay c·∫£ khi l·ªói
        return false;
    }

    void endConnection()
    {
        http.end(); // G·ªçi khi deep sleep ho·∫∑c t·∫Øt module
    }
};

#endif // API_MODULE_H
