#ifndef CAMERA_MODULE_H
#define CAMERA_MODULE_H

#include "esp_camera.h"
#include <Arduino.h>

/*
  CameraModule ch·ªãu tr√°ch nhi·ªám:
   - Kh·ªüi t·∫°o camera ESP32-CAM
   - Ch·ª•p ·∫£nh JPEG v√† tr·∫£ v·ªÅ pointer camera_fb_t*
   - Gi·∫£i ph√≥ng buffer khi ƒë√£ s·ª≠ d·ª•ng xong
*/

class CameraModule {
public:
    CameraModule() {}

    // Kh·ªüi t·∫°o camera. Tr·∫£ v·ªÅ true n·∫øu th√†nh c√¥ng, false n·∫øu l·ªói.
    bool init() {
        camera_config_t config = {
            .pin_pwdn       = PWDN_GPIO_NUM,
            .pin_reset      = RESET_GPIO_NUM,
            .pin_xclk       = XCLK_GPIO_NUM,
            .pin_sccb_sda   = SIOD_GPIO_NUM,
            .pin_sccb_scl   = SIOC_GPIO_NUM,
            .pin_d7         = Y9_GPIO_NUM,
            .pin_d6         = Y8_GPIO_NUM,
            .pin_d5         = Y7_GPIO_NUM,
            .pin_d4         = Y6_GPIO_NUM,
            .pin_d3         = Y5_GPIO_NUM,
            .pin_d2         = Y4_GPIO_NUM,
            .pin_d1         = Y3_GPIO_NUM,
            .pin_d0         = Y2_GPIO_NUM,
            .pin_vsync      = VSYNC_GPIO_NUM,
            .pin_href       = HREF_GPIO_NUM,
            .pin_pclk       = PCLK_GPIO_NUM,
            .xclk_freq_hz   = 20000000,
            .ledc_timer     = LEDC_TIMER_0,
            .ledc_channel   = LEDC_CHANNEL_0,
            .pixel_format   = PIXFORMAT_JPEG,

            // ƒêi·ªÅu ch·ªânh ƒë·ªô ph√¢n gi·∫£i v√† JPEG quality ƒë·ªÉ gi·∫£m dung l∆∞·ª£ng
            .frame_size     = FRAMESIZE_QVGA,  // 320√ó240
            .jpeg_quality   = 12,              // t·ª´ 12‚Äì15 ƒë·ªÉ file ~30‚Äì50 KB
            .fb_count       = 1
        };

        // N·∫øu board c√≥ PSRAM (v√≠ d·ª• WROVER), b·∫≠t ƒë·ªÉ buffer n·∫±m ·ªü PSRAM
        #ifdef CONFIG_SPIRAM_SUPPORT
          config.fb_location = CAMERA_FB_IN_PSRAM;
        #endif

        esp_err_t err = esp_camera_init(&config);
        if (err != ESP_OK) {
            Serial.printf("‚ùå L·ªói kh·ªüi t·∫°o camera: 0x%x\n", err);
            return false;
        }
        Serial.println("‚úÖ Camera ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng");
        return true;
    }

    // Ch·ª•p m·ªôt t·∫•m ·∫£nh. N·∫øu th√†nh c√¥ng, tr·∫£ v·ªÅ pointer camera_fb_t* ch·ª©a data JPEG.
    // N·∫øu l·ªói, tr·∫£ v·ªÅ nullptr.
    camera_fb_t* capture() {
        camera_fb_t* fb = esp_camera_fb_get();
        if (!fb) {
            Serial.println("‚ùå L·ªói ch·ª•p ·∫£nh: fb == nullptr");
            return nullptr;
        }
        Serial.printf("üì∏ ƒê√£ ch·ª•p ·∫£nh: %u bytes\n", (unsigned)fb->len);
        return fb;
    }

    // Gi·∫£i ph√≥ng buffer sau khi ƒë√£ x·ª≠ l√Ω xong
    void release(camera_fb_t* fb) {
        if (fb) {
            esp_camera_fb_return(fb);
        }
    }

private:
    // C√°c define ch√¢n GPIO cho module AI-Thinker ESP32-CAM
    static const int PWDN_GPIO_NUM   = 32;
    static const int RESET_GPIO_NUM  = -1;
    static const int XCLK_GPIO_NUM   = 0;
    static const int SIOD_GPIO_NUM   = 26;
    static const int SIOC_GPIO_NUM   = 27;
    static const int Y9_GPIO_NUM     = 35;
    static const int Y8_GPIO_NUM     = 34;
    static const int Y7_GPIO_NUM     = 39;
    static const int Y6_GPIO_NUM     = 36;
    static const int Y5_GPIO_NUM     = 21;
    static const int Y4_GPIO_NUM     = 19;
    static const int Y3_GPIO_NUM     = 18;
    static const int Y2_GPIO_NUM     = 5;
    static const int VSYNC_GPIO_NUM  = 25;
    static const int HREF_GPIO_NUM   = 23;
    static const int PCLK_GPIO_NUM   = 22;
};

#endif // CAMERA_MODULE_H
