#ifndef HTTP_SENSORS_MODULE_H
#define HTTP_SENSORS_MODULE_H

#include <WiFi.h>
#include <WiFiClientSecure.h>

/**
 * @brief Module g·ª≠i d·ªØ li·ªáu sensor qua HTTP POST.
 */
class HttpSensorsModule {
private:
  const char *host;
  const int port;
  const char *path;
  const char *deviceToken;
  const char *deviceId;
  WiFiClientSecure client;

public:
  /**
   * @brief H√†m kh·ªüi t·∫°o.
   * @param h Host (t√™n mi·ªÅn ho·∫∑c IP)
   * @param p Port (v√≠ d·ª•: 443)
   * @param pa Path (v√≠ d·ª•: "/api/data")
   * @param token Device token (chu·ªói x√°c th·ª±c)
   * @param id Device ID (m√£ ƒë·ªãnh danh thi·∫øt b·ªã)
   */
  HttpSensorsModule(const char *h, int p, const char *pa, const char *token, const char *id)
      : host(h), port(p), path(pa), deviceToken(token), deviceId(id) {
    client.setInsecure(); // ‚ö† B·ªè ki·ªÉm tra SSL cert cho ƒë∆°n gi·∫£n
  }

  /**
   * @brief G·ªçi n·∫øu c·∫ßn setup th√™m, hi·ªán t·∫°i ch·ªâ tr·∫£ true.
   */
  bool begin() {
    return true;
  }

  /**
   * @brief G·ª≠i d·ªØ li·ªáu JSON ƒë·∫øn server qua HTTPS.
   * @param payload N·ªôi dung JSON
   * @param length ƒê·ªô d√†i n·ªôi dung
   * @return true n·∫øu g·ª≠i th√†nh c√¥ng, ng∆∞·ª£c l·∫°i false
   */
  bool sendData(const char *payload, size_t length) {
    if (WiFi.status() != WL_CONNECTED) {
      Serial.println("üö´ WiFi ch∆∞a k·∫øt n·ªëi");
      return false;
    }

    if (!payload || length == 0) {
      Serial.println("üö´ Payload r·ªóng");
      return false;
    }

    Serial.printf("üõ† K·∫øt n·ªëi t·ªõi %s:%d\n", host, port);
    if (!client.connect(host, port)) {
      Serial.println("‚ùå K·∫øt n·ªëi th·∫•t b·∫°i");
      return false;
    }

    // T·∫°o v√† g·ª≠i HTTP request
    String request = String("POST ") + path + " HTTP/1.1\r\n" +
                     "Host: " + host + "\r\n" +
                     "Content-Type: application/json\r\n" +
                     "x-device-token: " + deviceToken + "\r\n" +
                     "x-device-id: " + deviceId + "\r\n" +
                     "Content-Length: " + String(length) + "\r\n" +
                     "Connection: close\r\n\r\n";

    client.print(request);
    client.write((const uint8_t *)payload, length);

    Serial.println("‚úÖ Request ƒë√£ g·ª≠i");

    // ƒê·ªçc response t·ª´ server
    String response;
    unsigned long timeout = millis();
    while (client.connected() && millis() - timeout < 5000) {
      while (client.available()) {
        String line = client.readStringUntil('\n');
        response += line + "\n";
      }
      delay(10);
    }
    client.stop();

    Serial.println("üì• Response:");
    Serial.println(response);

    return true;
  }

  /**
   * @brief Ng·∫Øt k·∫øt n·ªëi kh·ªèi server.
   */
  void endConnection() {
    client.stop();
  }
};

#endif // HTTP_SENSORS_MODULE_H
